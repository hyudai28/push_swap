・このゲームは２つのスタックを持つ
	・a.ランダムな数字が格納されている
	・b.空である
・ゴールは昇順に並び替えてaに格納する

・数字は以下の操作を行う
	sa.stack aの先頭２つを入れ替える。ただし１つのみの時は何もしない
	sb.stack bの先頭２つを入れかる。ただし１つのみの時は何もしない
	ss.sa と sbを同時に実行する
	ra. aの先頭要素を一番最後に持っていく
	rb. bの先頭要素を一番最後に持っていく
	rr. ra rbを同時に実行する
	rra. aの一番最後を一番最初に持っていく
	rrb. bの一番最後を一番最初に持っていく
	rrr. rra rrbを同時に実行
	pa. bの先頭要素をaの先頭に持っていく
	pb. aの先頭要素をbの先頭に持っていく


push_swap
./push_swap 3 2 1
sa
rra
./checker 3 2 1
(標準入力を受け付ける)


./push_swap a
Error
./push_swap 2147483648
Error

./checker
(何もしない)


データの個数によって最適な考え方が異なる
・３
case1
2 1 3
sa
1 2 3

case2
3 2 1
sa
2 3 1
rra
1 2 3

case3
3 2 1
ra
1 2 3

case4
1 3 2
sa
3 1 2
ra
1 2 3

case5
2 3 1
rra
1 2 3


・５



・１００



・５００



数字が３つの時５個のパターンに分けられる
・２１３
sa
・３２１
sa
rra
・３１２
ra
・１３２
sa
ra
・２３１
rra

そのまま
・１２３


1~10
a 0123456789
b

quick 0123 4 5 6789
a 56789
b 01234

quick 01 2 34
a 3456789
b 012

b sort
	pa ra
a 03456789 ra  34567890
b 12
	pa ra
a 134567890 ra 345678901
b 2

	pa ra
a 2345678901 ra 3456789 012
b
345 6 789 012
median = 6
a 789012
b 3456
median = 4
a 56789 012
b 34

a 56789 01234
b


a 0123456789
b

100
50
25
13
7
4
2
8

50 * 



ファイル構成
・ps_commands.c
	saなどのコマンドを集めたファイル。これは独立したモジュールとする。

・ps_list_utils
	list関係の便利関数はここに
	listを先頭に戻す関数など



・raが続いている　→ half_a_to_bではない bquicksortで止まってるみたい
get node count関数が機能していなかった。-------------------------------


=========print start=========

[a]node[1] = [4]
[a]node[2] = [6]
[a]node[3] = [7]
[a]node[4] = [9]
[a]node[5] = [5]

=========print fin=========
=========print start=========

[b]node[1] = [0]
[b]node[2] = [3]
[b]node[3] = [2]
[b]node[4] = [1]

=========print fin=========
_____allsort_____
        この関数では残り４つ以下となったBをソートする関数です。
        以下の手順で実装されます。
        1.４つの場合は先頭をAに飛ばします。
        2.３つとなったBでソートをかけます。
        3.Aに飛ばします。
        4.１を実行した場合は戻す前にAの先頭と比較を行い
        Aの先頭の方が小さい場合は先にAの先頭をraしフラグを立てます。
pa
sb
rrb
ra

pa
pa
pa
pa
ra
ra
ra
=========print start=========

[a]node[1] = [4]
[a]node[2] = [6]
[a]node[3] = [7]
[a]node[4] = [9]
[a]node[5] = [5]
[a]node[6] = [0]
[a]node[7] = [2]

ここのコマンドの結果が一致していない.---------------




・bに何位も入っていない時にprint nodeを呼び出すとセグフォ------------------------
・get medianがソート済みのものも含めての中央値を出してしまう-----------------------
	node_to_aryでaryを作る際にソート済みを選ばないようにすること-----------------
	node_to_aryのaryは固定調なので渡す際にソート済みのものを省いた関数を使う--------

・一回ソートを行って後ろにたまる----------------------------------------------
	その後にクイックソートで後ろに貯めてしまうため、貯めた分の戻す必要がある。--------
	トリガーを設置---------------------------------------------------------
	

	boundaryが機能してない------------------------------------------------



	機能していればhalf_A_to_bで最後まで行くことはないこともない-----------------

	swap3で２個以下を実装 done------------------------------------
	探索した後に戻す処理を追加 prevがfinになるまで done---------------

・half_a_to_bで最後に残った数が４つ以下の場合は全部送るようにしたい

・終了した時のチェックを考える

	bに要素がない時にセグフォする不具合を修正する。------------
	print_nodeが悪いのでは？？--------



	half_a_to_bのboundaryの扱いがちょっとおかしい。正しくはboundaryも一緒んいbに飛ばす